Arrow Function

HFunction in any programming language is the basic building block to create and combine the related bits of code. Every programming language provides certain kinds of practices to write any function. The arrow function syntax is one of the most used and efficient ones to create a function in JavaScript.

How to create arrow function: To write the arrow function, simply create any variable it can be const, let, or var but always do prefer with const to avoid unnecessary problems. And then assign the function code to the variable it. So from now, you can call that function by writing the parenthesis in front of that variable! With arrow function syntax, we consider function as an object and assign the definition to some variable. Following are the syntax of the arrow function:

const myFunction = (param1, param2,
    .... paramN) => { // function code }
const myFunction = (param) => { // function code }
                      or 
const myFunction = param => { // function code }  
const myFunction = param => { return param*param }
                      or 
const myFunction = param => param*param
We can omit the {} parenthesis when there is only one statement and the JavaScript considers that statement as return value, also there is no need to write parenthesis () when there is only one parameter. The arrow function cannot contain the line break between the (params) and the arrow =>, Also there should not be any space between the = and > characters.  

Example 1: In this example, we will create program to add two number first using normal function and then using arrow function.

 

Using normal function:

function myFunction(){
  let a = 5, b = 4;
  return a+b;
}
console.log(myFunction());

Output
9
 

Using arrow function:

const myFunction = () =>{
  let a = 5, b = 4;
  return a+b;
}
console.log(myFunction());

Output
9
Explanation: In the arrow function, we do not write the function keyword, so it is necessary to assign it to some kind of variable like here we have assigned to a constant variable named myFunction.

 

Example 2: In this example, we will create function of single expressions using both normal and arrow function one by one.

 

Using normal function:

function myFunction(num){
  return num*num;
}
console.log(myFunction(4));

Output
16
 

Using arrow function:

const myFunction = num => num*num;
// Equivalent to const myFunction = (num) =>{ return num*num; }
  
console.log(myFunction(4));

Output
16
Explanation: When we have only one return expression in function, arrow syntax provides an easier way to write. We can drop the parenthesis of the parameter and also the return statement along with code blocks braces.

 

Limitations of Arrow Functions: Earlier we have seen how easily we can create a function with the arrow syntax now it’s time to look upon some limitations also because they will not work similarly to normal functions in several situations.

No binding of this keyword: It cannot be used as a method because of not having a binding of this keyword. Arrow function contains the lexical this instead of their own. The value of this will be based upon the scope in which they are defined. So the arrow function is defined in the window scope hence this will refer to the window object instead of the object in which the function has been written. There does not exist any property or method with ‘num’ hence undefined will be printed.

var obj = {
  num: 10,
  myFunc: () => {console.log(this.num)}
}
  
obj.myFunc();

Output
undefined
Explanation: The normal function contains this which refers to the object to which it belongs. Hence the function belongs to the obj object and property num exists inside it, so it will be printed successfully. 