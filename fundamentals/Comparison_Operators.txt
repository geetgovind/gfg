JavaScript Comparison Operators

Operators are used to perform specific mathematical and logical computations on operands. Like C, C++, Java, Python and various other languages, JavaScript also supports Comparison operations. Comparison operators are used in logical statements to determine equality or difference between variables or values. There are various comparison operators supported by JavaScript:

Equality Operators
Relational Operators
Equality Operators
1. Equality (==): 
This operator is used to compare the equality of two operands. If equal then the condition is true otherwise false.

Syntax:

x == y
Below examples illustrate the (==) operator in JavaScript:

Example 1:

// Illustration of (==) operator
let val1 = 5;
let val2 = '5';

// Checking of operands
console.log(val1 == 5);
console.log(val2 == 5);        
console.log(val1 == val1);

// Check against null and boolean value
console.log(0 == false);   
console.log(0 == null);

Output
true
true
true
true
false
 

Example 2:

// Illustration of (==) operator
let obj1 = {'val1': 'value'};
let obj2 = {'val2': 'value'};

// Checking of operands
console.log(obj1.val1 == 'value');        
console.log(obj1 == obj2);
console.log(obj1.val1 == obj2.val2);

// Check against undefined
console.log(0 == undefined);   
console.log(null == undefined);

Output
true
false
true
false
true
 

2. Inequality (!=): 
This operator is used to compare the inequality of two operands. If equal then the condition is false otherwise true.

Syntax:

x != y
Below examples illustrate the (!=) operator in JavaScript:

Example 1:

// Illustration of (!=) operator
let val1 = 5;
let val2 = '5';

// Checking of operands
console.log(val1 != 6);
console.log(val2 != '5');        
console.log(val1 != val1);

// Check against null and boolean value
console.log(0 != false);   
console.log(0 != null);

Output
true
false
false
false
true
 

Example 2:

// Illustration of (!=) operator
let obj1 = {'val1': 'value'};
let obj2 = {'val2': 'value'};

// Checking of operands
console.log(obj1.val1 != 'value');        
console.log(obj1 != obj2);
console.log(obj1.val1 != obj2.val2);

// Check against undefined
console.log(0 != undefined);   
console.log(null != undefined);

Output
false
true
false
true
false
 

3. Strict equality (===): 
This operator is used to compare the equality of two operands with type. If both value and type are equal then the condition is true otherwise false.

Syntax:

x === y
Below examples illustrate the (===) operator in JavaScript:

Example 1:

// Illustration of (===) operator
let val1 = 5;
let val2 = '5';

// Checking of operands
console.log(val1 === 6);
console.log(val2 === '5');        
console.log(val1 === val1);

// Check against null and boolean value
console.log(0 === false);   
console.log(0 === null);

Output
false
true
true
false
false
 

Example 2:

// Illustration of (===) operator
let obj1 = {'val1': 'value'};
let obj2 = {'val2': 'value'};

// Checking of operands
console.log(obj1.val1 === 'value');        
console.log(obj1 === obj2);
console.log(obj1.val1 === obj2.val2);

// Check against undefined
console.log(0 === undefined);   
console.log(null === undefined);

Output
true
false
true
false
false
 

4. Strict inequality (!==): 
This operator is used to compare the inequality of two operands with type. If both value and type are not equal then the condition is true otherwise false.

Syntax:

x !== y
Below examples illustrate the (!==) operator in JavaScript:

Example 1:

// Illustration of (!==) operator
let val1 = 5;
let val2 = '5';

// Checking of operands
console.log(val1 !== 6);
console.log(val2 !== '5');        
console.log(val1 !== val1);

// Check against null and boolean value
console.log(0 !== false);   
console.log(0 !== null);

Output
true
false
false
true
true
 

Example 2:

// Illustration of (!==) operator
let obj1 = {'val1': 'value'};
let obj2 = {'val2': 'value'};

// Checking of operands
console.log(obj1.val1 !== 'value');        
console.log(obj1 !== obj2);
console.log(obj1.val1 !== obj2.val2);

// Check against undefined
console.log(0 !== undefined);   
console.log(null !== undefined);

Output
false
true
false
true
true
 

Relational Operators
1. Greater than operator (>): 
This operator is used to check whether the left side value is greater than the right side value. If value is greater then the condition is true otherwise false.

Syntax:

x > y
Below examples illustrate the (>) operator in JavaScript:

Example 1:

// Illustration of (>) operator
let val1 = 5;
let val2 = "5";

// Checking of operands
console.log(val1 > 0);
console.log(val2 > "10");        
console.log(val1 > "10");
console.log(val2 > 0);

Output
true
true
false
true
 

Example 2:

// Illustration of (>) operator
let obj1 = {'val1': 1};
let obj2 = {'val2': 3};

// Checking of operands
console.log(obj1.val1 > 0);        
console.log(obj1 > obj2);
console.log(obj1.val1 > obj2.val2);
console.log(obj2 > obj1);
console.log(obj2.val2 > obj1.val1);

Output
true
false
false
false
true
 

2. Greater than or equal operator (>=): 
This operator is used to check whether the left side operand is greater than or equal to the right side operand. If value is greater than or equal, then the condition is true otherwise false.

Syntax:

x >= y
Below examples illustrate the (>=) operator in JavaScript:

Example 1:

// Illustration of (>=) operator
let val1 = 5;
let val2 = "5";

// Checking of operands
console.log(val1 >= 5);
console.log(val2 >= "15");        
console.log(val1 >= "5");
console.log(val2 >= 15);

Output
true
true
true
false
 

Example 2:

// Illustration of (>=) operator
let obj1 = {'val1': 1};
let obj2 = {'val2': 3};

// Checking of operands
console.log(obj1.val1 >= 0);        
console.log(obj1 >= obj2);
console.log(obj1.val1 >= obj2.val2);
console.log(obj2 >= obj1);
console.log(obj2.val2 >= obj1.val1);

Output
true
true
false
true
true
 

3. Less than operator  (<): 
This operator is used to check whether the left side value is less than right side value. If yes then the condition is true otherwise false.

Syntax:

x < y
Below examples illustrate the (<) operator in JavaScript:

Example 1:

// Illustration of (<) operator
let val1 = 5;
let val2 = "5";

// Checking of operands
console.log(val1 < 15);
console.log(val2 < "0");        
console.log(val1 < "0");
console.log(val2 < 15);

Output
true
false
false
true
 

Example 2:

// Illustration of (<) operator
let obj1 = {'val1': 1};
let obj2 = {'val2': 3};

// Checking of operands
console.log(obj1.val1 < 10);        
console.log(obj1 < obj2);
console.log(obj1.val1 < obj2.val2);
console.log(obj2 < obj1);
console.log(obj2.val2 < obj1.val1);

Output
true
false
true
false
false
 

4. Less than or equal operator  (<=): 
This operator is used to check whether the left side operand value is less than or equal to the right side operand value. If yes then the condition is true otherwise false.

Syntax:

x <= y
Below examples illustrate the (<=) operator in JavaScript:

Example 1:

// Illustration of (<=) operator
let val1 = 5;
let val2 = "5";

// Checking of operands
console.log(val1 <= 15);
console.log(val2 <= "0");        
console.log(val1 <= "0");
console.log(val2 <= 15);

Output
true
false
false
true
 

Example 2:

// Illustration of (<=) operator
let obj1 = {'val1': 1};
let obj2 = {'val2': 3};

// Checking of operands
console.log(obj1.val1 <= 10);        
console.log(obj1 <= obj2);
console.log(obj1.val1 <= obj2.val2);
console.log(obj2 <= obj1);
console.log(obj2.val2 <= obj1.val1);

Output
true
true
true
true
false
 

Supported Browsers: The browsers supported by all JavaScript Comparison operators are listed below:

Google Chrome
Firefox
Opera
Safari
Edge
Internet Explorer