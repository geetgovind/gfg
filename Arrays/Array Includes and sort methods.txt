Array Includes and sort methods

Array includes() Method

The array.includes() method is used to know either a particular element is present in the array or not and accordingly, it returns true or false i.e, if the element is present, then it returns true otherwise false.

Syntax:

array.includes(searchElement, start)
Parameter: This method accepts two parameters as mentioned above and described below:

searchElement: This parameter holds the element which will be searched.
start: This parameter is optional and it holds the starting point of the array, where to begin the search the default value is 0.
Return Value: It returns a Boolean value i.e, either True or False.

Below examples illustrate the Array includes() method in JavaScript:

 

Example 1: In this example the method will searched for the element 2 in that array.
Input : [1, 2, 3, 4, 5].includes(2);
Output: true
 

Example 2: In this example the method will searched for the element 9 in that array.
Input : [1, 2, 3, 4, 5].includes(9);
Output: false
Code for the above method is provided below:

 

Program 1:

// Taking input as an array A
// having some elements.
var A = [ 1, 2, 3, 4, 5 ];

// includes() method is called to
// test whether the searching element
// is present in given array or not.
a = A.includes(2)

// Printing result of includes().
console.log(a);

Output
true
 

Program 2:

// Taking input as an array A
// having some elements.
var name = [ 'gfg', 'cse', 'geeks', 'portal' ];

// includes() method is called to
// test whether the searching element
// is present in given array or not.
a = name.includes('cat')

// Printing result of includes()
console.log(a);

Output
false
 

Array sort() Method

The arr.sort() method is used to sort the array in place in a given order according to the compare() function. If the method is omitted then the array is sorted in ascending order.

Syntax:

arr.sort(compareFunction)
Parameters: This method accepts a single parameter as mentioned above and described below:

compareFunction: This parameter is used to sort the elements according to different attributes and in a different order.

compareFunction(a,b) < 0
compareFunction(a,b) > 0
compareFunction(a,b) = 0
Return value: This method returns the reference of the sorted original array.

Below is an example of Array sort() method.

 

Program 1: 

// JavaScript to illustrate sort() function
function func() {

// Original string
var arr = ["Geeks", "for", "Geeks"]

console.log(arr);
// Sorting the array
console.log(arr.sort());
}
func();

Output
[ 'Geeks', 'for', 'Geeks' ]
[ 'Geeks', 'Geeks', 'for' ]
 

Example 1: In this example, the sort() method arranges the elements of the array in ascending order.

var arr = [2, 5, 8, 1, 4]
console.log(arr.sort());
console.log(arr);
Output:

1,2,4,5,8
1,2,4,5,8
 

Example 2: In this example, the sort() method the elements of the array are sorted according to the function applied on each element.

var arr = [2, 5, 8, 1, 4]
console.log(arr.sort(function(a, b) {
  return a + 2 * b;
}));
console.log(arr);
Output:

2,5,8,1,4
2,5,8,1,4
 

Example 3: In this example, we use the sort() method on the array of numbers & observe some unexpected behavior.

let numbers = [20,5.2,-120,100,30,0]
console.log(numbers.sort())
Output:

-120,0,100,20,30,5.2
Our output should be -120, 0, 5.2, 20, 30, 100 but it’s not so, why? Because as we apply the direct sort() method, it would process accordingly: 100 would be placed before 20, as ‘2’ is larger than ‘1’, and similarly in the case of 30 & 5.2,  as ‘5’ is larger than ‘3’ thus, 30 would be placed before 5.2. We can resolve this unexpected error by using the sort() method for numerics using the following compare function: 

let numbers = [20,5.2,-120,100,30,0];

/* Logic: 
   20 - (5.2) = +ve => 5.2 would be placed before 20,
   20 - (-120) = +ve => -120 would be placed before 20,
   20 - (100) = -ve => 100 would be placed after 20,
   20 - (30) = -ve => 30 would be placed after 20,
   20 - (0) = +ve => 0 would be placed before 20,
   Similarly for every element, we check and place them accordingly in iterations.
*/
function compare(a,b){
    return a-b;
}
console.log(numbers.sort(compare));
Output:

-120,0,5.2,20,30,100
Code for the above method is provided below: 

 

Program 1: 

// JavaScript to illustrate sort() function
function func() {
//Original string
var arr = [2, 5, 8, 1, 4]

//Sorting the array
console.log(arr.sort());
console.log(arr);
}
func();

Output
[ 1, 2, 4, 5, 8 ]
[ 1, 2, 4, 5, 8 ]
 

Program 2: 

// JavaScript to illustrate sort() function
function func() {

// Original array
var arr = [2, 5, 8, 1, 4];
console.log(arr.sort(function(a, b) {
return a + 2 * b;
}));
console.log(arr);
}
func();

Output
[ 2, 5, 8, 1, 4 ]
[ 2, 5, 8, 1, 4 ]
 

Time Complexity: The time complexity of the sort() method varies & depends on implementation.
For example, in the Firefox web browser, it uses the merge sort implementation which gives time complexity as O(nlog n). Whereas, in Google Chrome web browser, it uses the Timsort implementation (a hybrid of merge sort and insertion sort), gives time complexity is O(nlogn).